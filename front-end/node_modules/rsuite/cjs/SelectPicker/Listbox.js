"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));

var _getPosition = _interopRequireDefault(require("dom-lib/getPosition"));

var _scrollTop = _interopRequireDefault(require("dom-lib/scrollTop"));

var _getHeight = _interopRequireDefault(require("dom-lib/getHeight"));

var _Windowing = require("../Windowing");

var _shallowEqual = _interopRequireDefault(require("../utils/shallowEqual"));

var _utils = require("../utils");

var _ListboxOptionGroup = _interopRequireDefault(require("./ListboxOptionGroup"));

var _getDataGroupBy = require("../utils/getDataGroupBy");

var _ListboxOption = _interopRequireDefault(require("./ListboxOption"));

var Listbox = /*#__PURE__*/_react.default.forwardRef(function Listbox(props, ref) {
  var _props$options = props.options,
      options = _props$options === void 0 ? [] : _props$options,
      getOptionKey = props.getOptionKey,
      groupBy = props.groupBy,
      sort = props.sort,
      _props$maxHeight = props.maxHeight,
      maxHeight = _props$maxHeight === void 0 ? 320 : _props$maxHeight,
      selectedOptionKey = props.selectedOptionKey,
      _props$disabledOption = props.disabledOptionKeys,
      disabledOptionKeys = _props$disabledOption === void 0 ? [] : _props$disabledOption,
      _props$classPrefix = props.classPrefix,
      classPrefix = _props$classPrefix === void 0 ? 'dropdown-menu' : _props$classPrefix,
      _props$labelKey = props.labelKey,
      labelKey = _props$labelKey === void 0 ? 'label' : _props$labelKey,
      virtualized = props.virtualized,
      listProps = props.listProps,
      virtualizedListRef = props.listRef,
      className = props.className,
      style = props.style,
      activeOptionKey = props.activeOptionKey,
      optionClassPrefix = props.optionClassPrefix,
      _props$rowHeight = props.rowHeight,
      rowHeight = _props$rowHeight === void 0 ? 36 : _props$rowHeight,
      _props$rowGroupHeight = props.rowGroupHeight,
      rowGroupHeight = _props$rowGroupHeight === void 0 ? 48 : _props$rowGroupHeight,
      renderMenuGroup = props.renderMenuGroup,
      renderMenuItem = props.renderMenuItem,
      onGroupTitleClick = props.onGroupTitleClick,
      onSelect = props.onSelect,
      rest = (0, _objectWithoutPropertiesLoose2.default)(props, ["options", "getOptionKey", "groupBy", "sort", "maxHeight", "selectedOptionKey", "disabledOptionKeys", "classPrefix", "labelKey", "virtualized", "listProps", "listRef", "className", "style", "activeOptionKey", "optionClassPrefix", "rowHeight", "rowGroupHeight", "renderMenuGroup", "renderMenuItem", "onGroupTitleClick", "onSelect"]);
  var group = typeof groupBy !== 'undefined';

  var _useClassNames = (0, _utils.useClassNames)(classPrefix),
      withClassPrefix = _useClassNames.withClassPrefix,
      prefix = _useClassNames.prefix,
      merge = _useClassNames.merge;

  var classes = merge(className, withClassPrefix('items', {
    grouped: group
  }));
  var menuBodyContainerRef = (0, _react.useRef)(null);
  var listRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)([]),
      foldedGroupKeys = _useState[0],
      setFoldedGroupKeys = _useState[1];

  var handleGroupTitleClick = (0, _react.useCallback)(function (key, event) {
    var _listRef$current;

    var nextGroupKeys = foldedGroupKeys.filter(function (item) {
      return item !== key;
    });

    if (nextGroupKeys.length === foldedGroupKeys.length) {
      nextGroupKeys.push(key);
    }

    setFoldedGroupKeys(nextGroupKeys);
    onGroupTitleClick === null || onGroupTitleClick === void 0 ? void 0 : onGroupTitleClick(event); // See example https://codesandbox.io/s/grouped-list-with-sticky-headers-shgok?fontsize=14&file=/index.js:1314-1381

    (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.resetAfterIndex(0); // use group index to reduce calculation
  }, [onGroupTitleClick, foldedGroupKeys]);
  (0, _react.useEffect)(function () {
    var container = menuBodyContainerRef.current;

    if (!container) {
      return;
    }

    var activeItem = container.querySelector("." + prefix('item-focus'));

    if (!activeItem) {
      activeItem = container.querySelector("." + prefix('item-active'));
    }

    if (!activeItem) {
      return;
    }

    var position = (0, _getPosition.default)(activeItem, container);
    var sTop = (0, _scrollTop.default)(container);
    var sHeight = (0, _getHeight.default)(container);

    if (sTop > position.top) {
      (0, _scrollTop.default)(container, Math.max(0, position.top - 20));
    } else if (position.top > sTop + sHeight) {
      (0, _scrollTop.default)(container, Math.max(0, position.top - sHeight + 32));
    }
  }, [activeOptionKey, menuBodyContainerRef, prefix]);
  (0, _utils.useMount)(function scrollToSelectedOption() {
    if (virtualized && selectedOptionKey) {
      if (typeof groupBy === 'undefined') {
        var _listRef$current2;

        var selectedOptionIndex = options.findIndex(function (option) {
          return (getOptionKey === null || getOptionKey === void 0 ? void 0 : getOptionKey(option)) === selectedOptionKey;
        });
        (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 ? void 0 : _listRef$current2.scrollToItem(selectedOptionIndex);
      } else {
        var _listRef$current3;

        var groups = (0, _getDataGroupBy.groupOptions)(options, groupBy, sort === null || sort === void 0 ? void 0 : sort(false), sort === null || sort === void 0 ? void 0 : sort(true));
        var selectedGroupIndex = groups.findIndex(function (group) {
          return group.key === selectedOptionKey;
        }); // TODO-Doma
        // This only scrolls the list to the group, not to the selected item within the group
        // .scrollToItem does not support specifying an px offset
        // Find a way to scroll to the selected item within the group

        (_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 ? void 0 : _listRef$current3.scrollToItem(selectedGroupIndex);
      }
    }
  });
  var renderOption = (0, _react.useCallback)(function (option) {
    var _getOptionKey;

    var optionKey = (_getOptionKey = getOptionKey === null || getOptionKey === void 0 ? void 0 : getOptionKey(option)) !== null && _getOptionKey !== void 0 ? _getOptionKey : JSON.stringify(option);
    var label = option[labelKey];
    var disabled = disabledOptionKeys === null || disabledOptionKeys === void 0 ? void 0 : disabledOptionKeys.some(function (disabledValue) {
      return (0, _shallowEqual.default)(disabledValue, optionKey);
    });
    var selected = (0, _shallowEqual.default)(selectedOptionKey, optionKey);
    var focus = !(0, _isUndefined.default)(activeOptionKey) && (0, _shallowEqual.default)(activeOptionKey, optionKey);
    return /*#__PURE__*/_react.default.createElement(_ListboxOption.default, {
      key: optionKey,
      disabled: disabled,
      selected: selected,
      active: focus,
      "data-key": optionKey,
      classPrefix: optionClassPrefix,
      onClick: function onClick(event) {
        if (!disabled) {
          onSelect === null || onSelect === void 0 ? void 0 : onSelect(optionKey, option, event);
        }
      }
    }, renderMenuItem ? renderMenuItem(label, option) : label);
  }, [getOptionKey, labelKey, disabledOptionKeys, selectedOptionKey, activeOptionKey, optionClassPrefix, renderMenuItem, onSelect]);
  var renderOptions = (0, _react.useCallback)(function (options) {
    return options.map(function (option) {
      return renderOption(option);
    });
  }, [renderOption]);
  var renderOptionGroup = (0, _react.useCallback)(function (group) {
    var groupKey = group.key;
    var expanded = !foldedGroupKeys.includes(groupKey);
    return /*#__PURE__*/_react.default.createElement(_ListboxOptionGroup.default, {
      key: groupKey,
      title: renderMenuGroup ? renderMenuGroup(groupKey, group) : groupKey,
      classPrefix: 'picker-menu-group',
      expanded: expanded,
      onClickTitle: function onClickTitle(e) {
        return handleGroupTitleClick(group.key, e);
      }
    }, renderOptions(group.options));
  }, [foldedGroupKeys, handleGroupTitleClick, renderMenuGroup, renderOptions]);
  var renderOptionGroups = (0, _react.useCallback)(function (groupKey) {
    var groups = (0, _getDataGroupBy.groupOptions)(options, groupKey, sort === null || sort === void 0 ? void 0 : sort(false), sort === null || sort === void 0 ? void 0 : sort(true));
    return groups.map(function (group) {
      return renderOptionGroup(group);
    });
  }, [options, renderOptionGroup, sort]);
  var renderVirtualizedOptions = (0, _react.useCallback)(function () {
    return /*#__PURE__*/_react.default.createElement(_Windowing.AutoSizer, {
      defaultHeight: maxHeight,
      style: {
        width: 'auto',
        height: 'auto'
      }
    }, function (_ref) {
      var height = _ref.height;
      return /*#__PURE__*/_react.default.createElement(_Windowing.List, (0, _extends2.default)({
        ref: (0, _utils.mergeRefs)(listRef, virtualizedListRef),
        height: height || maxHeight,
        itemCount: options.length,
        itemSize: rowHeight
      }, listProps), function (_ref2) {
        var index = _ref2.index;
        return renderOption(options[index]);
      });
    });
  }, [listProps, maxHeight, options, renderOption, rowHeight, virtualizedListRef]); // Example of rendering option groups in VariableSizeList
  // https://github.com/bvaughn/react-window/issues/358

  var renderVirtualizedOptionGroups = (0, _react.useCallback)(function (groupKey) {
    var groups = (0, _getDataGroupBy.groupOptions)(options, groupKey, sort === null || sort === void 0 ? void 0 : sort(false), sort === null || sort === void 0 ? void 0 : sort(true));
    return /*#__PURE__*/_react.default.createElement(_Windowing.AutoSizer, {
      defaultHeight: maxHeight,
      style: {
        width: 'auto',
        height: 'auto'
      }
    }, function (_ref3) {
      var height = _ref3.height;
      return /*#__PURE__*/_react.default.createElement(_Windowing.List, (0, _extends2.default)({
        ref: (0, _utils.mergeRefs)(listRef, virtualizedListRef),
        height: height || maxHeight,
        itemCount: groups.length,
        itemSize: function itemSize(index) {
          var item = groups[index];
          var expanded = !foldedGroupKeys.includes(item.key);

          if (expanded) {
            return item.options.length * rowHeight + rowGroupHeight;
          }

          return rowGroupHeight;
        }
      }, listProps), function (_ref4) {
        var index = _ref4.index;
        return renderOptionGroup(groups[index]);
      });
    });
  }, [foldedGroupKeys, listProps, maxHeight, options, renderOptionGroup, rowGroupHeight, rowHeight, sort, virtualizedListRef]);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    role: "listbox"
  }, rest, {
    className: classes,
    ref: (0, _utils.mergeRefs)(menuBodyContainerRef, ref),
    style: (0, _extends2.default)({}, style, {
      maxHeight: maxHeight
    })
  }), typeof groupBy === 'undefined' ? virtualized ? renderVirtualizedOptions() : renderOptions(options) : virtualized ? renderVirtualizedOptionGroups(groupBy) : renderOptionGroups(groupBy));
});

var _default = Listbox;
exports.default = _default;