import formatErrorMessage from './formatErrorMessage';
/**
 * Create a data asynchronous validator
 * @param data
 */
export function createValidatorAsync(data, name) {
    function check(errorMessage) {
        return (checkResult) => {
            if (checkResult === false) {
                return { hasError: true, errorMessage };
            }
            else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {
                return checkResult;
            }
            return null;
        };
    }
    return (value, rules) => {
        const promises = rules.map(rule => {
            const { onValid, errorMessage, params } = rule;
            return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, {
                ...params,
                name: Array.isArray(name) ? name.join('.') : name
            })));
        });
        return Promise.all(promises).then(results => results.find((item) => item && (item === null || item === void 0 ? void 0 : item.hasError)));
    };
}
export default createValidatorAsync;
//# sourceMappingURL=createValidatorAsync.js.map